---
layout: post
title:      "The Gem known as Sinatra"
date:       2020-01-21 14:46:35 -0500
permalink:  the_gem_known_as_sinatra
---


The content of your blog post goes here.Going between Ruby to Sinatra is the moment things start coming together. The structures began to make sense. I was confused about Sinatra going in. The difference between GET, POST, PATCH, and DELETE was the first thing I had to wrap my head around. The logic and the presentation is no longer done on the same page. It is divided between the control and view. There is the models folder. Models felt the most familiar but we barely used it. I was pushed outside of my comfort zone. I had to rely on ActiveRecord to do a lot of the heavy lifting. ActiveRecord it saved me a lot of time. I would be lying it wasn't a little uncomfortable. Handing so much control to a new gem. I had no reason to worry. I am familiar with SQL so it connected the dots in ActiveRecord. Then we need to bring the models, together with the controllers. The controllers handle the logic of our app. The controller updates and changes the object instances. 
The controller does not work by itself. It is not an independent bin file. There is a reliance the controller has with views. Views is the HTML that a user would see on their browser. The change from the terminal to a browser was exciting. It made me feel like I was moving steps closer to my goals of becoming a web developer. 

View folder is HTML based but we can still perform some logic within view. I learned through the process having logic in the view is not the most prudent choice. Things became muddled in the view. I wanted a variable shown sometimes but not always. It was easier to do it within the controller.
I was confused wondering how everything was technically a post. While still now. Commands that we put in views of PUT, PATCH, DELETE were all post. At first, it doesn't seem like something that should work. It does work, if we understand verbs we place in views are all read as a post. It is translated to ruby and Sinatra. I started seeing the post, not as a post. It became a command to the controller. A way for the view to communicate with the controller. It allows for the web app to be opened up into multiple pages. The controller would receive commands through views and the search bar. I became excited when understood the role of the bar in a web app. If a post is a command, then the search bar is the commander. The search bar takes us to all the routes that we can create. 
Understanding the search bar as commander helped me understand the controller. When in a controller and there was a get. It is getting the HTML with have saved in our code within Views. The controller does what the search bar tells them to do. I understood the importance greater when persisting information between pages. Information had to be stored in cookies. I made my way at the beginning at first without a cookie-like session. Session would keep track of the user while they are within the app. Before I started using session I found ways to store information in the search bar. The more I worked on my project the more I understood the material. Routes made sense and I was able to read the information the computer was putting out with shotgun. I saw the terminal doing the math. The terminal is almost more interesting than the browser. I feel I became more literate.
There's more to go. I have to understand object relations better. Understand what I am allowed to do between a:has_many and a:belongs_to. Increase interaction between the objects. 
