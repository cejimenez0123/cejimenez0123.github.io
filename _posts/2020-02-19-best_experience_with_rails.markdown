---
layout: post
title:      "Best experience with Rails"
date:       2020-02-19 17:34:39 -0500
permalink:  best_experience_with_rails
---


The conventions remember an xkcd comic where there are 14 standards for doing something, a person figures to make a new universal standard. There are now 15 standards. I think this is what happens with rails. I heard repeated in my learning of rails convention over configuration. I took it to mean that conventions, the way of doing things is fairly standard. There's one to do one thing but there many ways to get there. 
I say this to say I learned to not stress about the convention this time around. I tried to with my project to make it simple, use what I already and built on top of it. The best way to make things simple is to make things as if it'd make you say it is obvious. I don't want to declare something obvious when it may not seem at the moment. 
	The solution at the beginning when solving problems in code is to do what is most obvious. When making a model that has it's own behaviors and it's own attributes before I simply relegated to hiding it within one of the important controllers. However, if you want something that people can understand you need to make obvious. You'll find user functions in a user controller. You also won't find invites within the user controller. They are different models. I'm trying to do too many things at once. With a certain fear, it'll make things too big, too complicated. I don't have the fear things will be as big as they need to be. However, if one is going to do something big, one should also make it as navigable as it can be. Every file like a box of information and tools for someone to work with, a folder is a box of boxes. 
I spent the longest time in my project making my SQL searches work. It was stressful. I was wondering how to get it done. You can't store a lot of information within a session or a flash, but we can store plenty. I had to find gems that allowed me to store more gems. For those that don't know rails, ActiveRecord-session_store has been spun off as its own gem. It allows you to store more information in sessions. I had to store some information for my application. I had to look for this gem to use it. I'm cautious using gems, but I deemed it reputable, unlike other gems. There are a lot of gems and one needs to trust other developers to know best. 
	To return to my SQL searches, I knew it was possible to find do a where or order_by but it is not easy to store the information so it persists. Most information does not persist in a rails app so I had to find new ways to make it possible to persist information between HTTP requests. I'm looking to learn more about HTTP requests. I'm having issues making sure things interact with each other. A route goes to a method but it is not simple to have information from the method persist into the browser. It was stressful but I was joyous when I solved it. It is the joy of programming to be stressed than an immediate release of stress, a sweet relief. I'm going to try to learn more about databases. I think it significant how we store and access information. We do not always want access to the database. The database is big. It is only made easy by the incremental id. It is easier to access the information from an object more than it is from the database. 
	We access the database through controllers. To make sure we keep as much code out of the view. I want to make my work as easy to read as possible. I have to study form_with, form_for, and form tag. See how I feel like using each. In order to make sure information does not come as nil.Relationships built by ActiveRecord, created by the use of has_many, belongs_to, gives us more flexibility in our code. It saves us a lot of work. I'm thankful for my learning and my continued learning as I move forward. 
	
