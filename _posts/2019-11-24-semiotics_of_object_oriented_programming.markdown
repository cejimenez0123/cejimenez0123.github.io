---
layout: post
title:      "Semiotics of Object Oriented Programming"
date:       2019-11-24 22:40:42 +0000
permalink:  semiotics_of_object_oriented_programming
---

I started my journey into Object-Oriented Programming through a video. The founder of the Flatiron School Avi Flombaum walks the students through the early history of computing and Object-Oriented Programming. How it started when Xerox let a couple of engineers move to California and get creative. The engineers started the Xerox Palo Alto Research Center(XPARC). They built what we know now as computers today. This includes the personal computer desktop, laptop, tablet, the mouse we click on, object-oriented programming software is written, and the graphic user interface(GUI) we use to interact with the technology. Importantly, they built the GUI which is what allows someone to maneuver within a computer with clicks and movements. Instead of having to know countless commands. They built what the layman understand computers to be. 

What got my mind running was when Flombaum starts the lesson by describing objects as a metaphor. When he said metaphor I thought maybe this will be easier then I believed in the beginning. I understood metaphor, I majored in English at university so I had to understand metaphor and all the doors it opens when writing. I use metaphor incessantly in my writing to paint a clear picture of feeling. In this case, metaphor is what it is. The metaphor means to say something is something else. So when writer Groucho Marx says “A hospital bed is a parked taxi with the meter running.” It does not mean that when you're on a hospital bed it is also a taxi, one that can be driven somewhere away from the humdrum. It is recognizing the similarities between the two. People can connect within the mind the there is dissonance so they need to find the logic behind the statement. In this case, having a hospital bed is going to cost you the longer you stay in the hospital, and you don't even get to go anywhere nice. The code is filled with a lot of similar turns of phrase that can be understood even if you don't understand the code itself. The example given by Flombaum is that a mouse click on a window opening up a new page is a metaphor. The two events the mouse click and the window opening aren't related. A mouse click in our world doesn't necessarily mean anything. When the mouse was first introduced by XPARC to the heads of Xerox the mouse probably looked like an art project. Art has no purpose, but tech does. A mouse click is a signal to open the web page. It opens up the world to us without knowing much about coding.

We find more metaphors and colloquialisms in object-oriented programming because an object in programming isn't literally the object. It is a representation of the object constructed by us by giving it qualities. We say a citizen is someone human, has a name, and has an ID. We can use objects to store information. 

Objects to me sound a lot like nouns. They are a thing. They have a meaning and existence, and they affect the world either passively or actively through their existence. We people who are nouns. We perform actions. In code, we may understand it better as methods. Methods were called logic, but when the method is called it is an action. The computer takes an action that the user commanded. I understood them as verbs the body runs so does a computer. I found more intersections of the Humanities and Technology intertwined with each other. The subjects of thought came together because the technology needed the humanities to take the technology out of the abstract into something that can be understood.

I found myself going back and forth between abstraction and the actual as I programmed. I was stuck sometimes but I learned handy tricks to dig into the abstraction. Using binding.pry to learn what stands behind an abstract value, that is really a stand for something else. An x was rarely just an x in math class, and an x is never an x in programming. An x is something else that we will place later we stick it in between the parentheses of a method as an argument `def method(x)`, or as a symbol of some other class of object. X is abstracted to mean anything. It can mean you as a user in 1s and 0s, storing everything there is to know, everything we let the computer know of ourselves. Or it could be the self and self can be an object in programming as long as we calling the self within the class. A class in an object a type of thing, a kind of noun. The self does actions or we find things within the self, we keep things with the self.all that store all the selves. It all gets poetic to a point to me. It is probably why I enjoying so much. I'm excited to learn more as I start to understand proper practice like the "one source of truth" which made me smile, there's no one source of truth in the real world. There is coding. If I do it right everything will work right together to make something that's almost living, with a name, and actions to perform, with a purpose that it knows. 
